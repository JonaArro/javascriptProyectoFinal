let password = 1982;
let loginAttempts = 4; // N√∫mero m√°ximo de intentos
let loggedIn = false;
const cotizacionDolarCompra = 848;
const cotizacionDolarVenta = 808;
const cotizacionEuroCompra = 941;
const cotizacionEuroVenta = 881;

function validarEntradasPrestamo(montoPrestamo, plazoMeses) {
  if (
    isNaN(montoPrestamo) ||
    isNaN(plazoMeses) ||
    montoPrestamo <= 0 ||
    plazoMeses <= 0
  ) {
    alert("‚ùóPor favor, ingrese valores v√°lidos y positivos.‚ùó");
    return false;
  }
  return true;
}

function calcularTasaInteresAnual(plazoMeses) {
  // Tasa tomadas de ejemplo del BBVA
  if (plazoMeses >= 1 && plazoMeses <= 6) {
    return 286.13; // TEA para 6 meses
  } else if (plazoMeses >= 7 && plazoMeses <= 12) {
    return 293.09; // TEA para 12 meses
  } else if (plazoMeses >= 13 && plazoMeses <= 18) {
    return 296.61; // TEA para 18 meses
  } else if (plazoMeses >= 19 && plazoMeses <= 24) {
    return 296.61; // TEA para 24 meses
  } else {
    return 298.8; // TEA para m√°s de 24 meses
  }
}

function mostrarPorcentajesInteres() {
  alert(
    "Porcentajes de inter√©s seg√∫n el plazo:\n" +
      "1-6 meses: 286.13% (TEA)\n" +
      "7-12 meses: 293.09% (TEA)\n" +
      "13-18 meses: 296.61% (TEA)\n" +
      "19-24 meses: 296.61% (TEA)\n" +
      "M√°s de 25 meses: 298.80% (TEA)"
  );
}

function simuladorPrestamo() {
  let montoPrestamo, plazoMeses;

  mostrarPorcentajesInteres(); // Mostrar porcentajes antes de solicitar datos

  do {
    montoPrestamo = parseFloat(prompt("üí≤Ingrese el monto del pr√©stamo:"));
    plazoMeses = parseInt(prompt("üóìÔ∏èIngrese el plazo del pr√©stamo en meses:"));
  } while (!validarEntradasPrestamo(montoPrestamo, plazoMeses));

  // Calcular la tasa de inter√©s anual seg√∫n los rangos establecidos
  let tasaInteresAnual = calcularTasaInteresAnual(plazoMeses);

  // Calcular la cuota mensual
  let tasaInteresMensual = tasaInteresAnual / 100 / 12;
  let cuotas = "";

  for (let i = 1; i <= plazoMeses; i++) {
    // F√≥rmula de amortizaci√≥n de pr√©stamos con inter√©s compuesto
    let cuotaMensual =
      (montoPrestamo * tasaInteresMensual) /
      (1 - Math.pow(1 + tasaInteresMensual, -plazoMeses));

    cuotas += `Mes: ${i}, Cuota Mensual ($): ${cuotaMensual.toFixed(2)}\n`;
  }

  alert("Detalles del pr√©stamo por mes:\n" + cuotas);
}

function cotizarDolar(pesos, compra = true) {
  return compra ? pesos / cotizacionDolarCompra : pesos * cotizacionDolarVenta;
}

function cotizarEuro(pesos, compra = true) {
  return compra ? pesos / cotizacionEuroCompra : pesos * cotizacionEuroVenta;
}

function validarCantidad(cantidad) {
  if (isNaN(cantidad) || cantidad <= 9) {
    alert("‚ùóPor favor, ingrese valores v√°lidos y positivos mayores a 9.‚ùó");
    return false;
  }
  return true;
}

function simuladorDolares() {
  let opcion = prompt(
    "Seleccione la operaci√≥n que desea realizar:\n" +
      "a.- Compra de d√≥lares üì•üíµ\n" +
      "b.- Venta de d√≥lares üì§üíµ\n\n" +
      "Cotizaciones del d√≠a:\n" +
      "Compra: $" +
      cotizacionDolarCompra +
      "\nVenta: $" +
      cotizacionDolarVenta
  );

  if (opcion === "a") {
    do {
      cantidadCompraDolar = parseFloat(
        prompt("üí≤Ingrese en pesos la cantidad de d√≥lares a comprar:")
      );
    } while (
      !validarCantidad(cantidadCompraDolar) ||
      isNaN(parseFloat(cantidadCompraDolar))
    );

    alert(
      "Con $ " +
        cantidadCompraDolar +
        " pesos puede comprar: U$D" +
        cotizarDolar(parseFloat(cantidadCompraDolar)).toFixed(2) +
        " (d√≥lares)"
    );
  } else if (opcion === "b") {
    do {
      cantidadVtaDolar = prompt("Ingrese la cantidad de d√≥lares a vender:");
    } while (
      !validarCantidad(cantidadVtaDolar) ||
      isNaN(parseFloat(cantidadVtaDolar))
    );

    alert(
      "Vendiendo U$D " +
        cantidadVtaDolar +
        " d√≥lares puede obtener: $" +
        cotizarDolar(cantidadVtaDolar, false).toFixed(2) +
        " (pesos)"
    );
  } else {
    alert("üõë‚ùå Opci√≥n no v√°lida ‚ùåüõë");
  }
}

function simuladorEuros() {
  let opcion = prompt(
    "Seleccione la operaci√≥n que desea realizar:\n" +
      "a.- Compra de Euros üì•üí∂\n" +
      "b.- Venta de Euros üì§üí∂\n\n" +
      "Cotizaciones del d√≠a:\n" +
      "Compra: $" +
      cotizacionEuroCompra +
      "\nVenta: $" +
      cotizacionEuroVenta
  );

  if (opcion === "a") {
    do {
      cantidadCompraEuro = parseFloat(
        prompt("üí≤Ingrese en pesos la cantidad de Euros a comprar:")
      );
    } while (
      !validarCantidad(cantidadCompraEuro) ||
      isNaN(parseFloat(cantidadCompraEuro))
    );

    alert(
      "Con $ " +
        cantidadCompraEuro +
        " pesos puede comprar: ‚Ç¨" +
        cotizarDolar(cantidadCompraEuro).toFixed(2) +
        " (euros)"
    );
  } else if (opcion === "b") {
    do {
      cantidadVtaEuro = parseFloat(
        prompt("Ingrese la cantidad de Euros a vender:")
      );
    } while (
      !validarCantidad(cantidadVtaEuro) ||
      isNaN(parseFloat(cantidadVtaEuro))
    );

    alert(
      "Vendiendo ‚Ç¨ " +
        cantidadVtaEuro +
        " euros puede obtener: $" +
        cotizarDolar(cantidadVtaEuro, false).toFixed(2) +
        " (pesos)"
    );
  } else {
    alert("üõë‚ùå Opci√≥n no v√°lida ‚ùåüõë");
  }
}

// ------------------------------------
// C√≥digo Principal
// ------------------------------------
alert("üè¶ Simulador Financiero üè¶");

for (let i = 0; i < loginAttempts; i++) {
  let enteredPassword = prompt("üîëüîë Ingrese su password üîëüîë");

  if (parseInt(enteredPassword) === password) {
    loggedIn = true;
    alert("üñ•Ô∏è‚å® Bienvenido al Simulador Financiero ‚å®üñ•Ô∏è");
    break; // Sale del bucle si la contrase√±a es correcta
  } else {
    alert(
      "‚ùóIngres√≥ incorrectamente su password, pruebe nuevamente. \nIntento: " +
        (i + 1)
    );
  }
}

if (loggedIn) {
  let option;

  do {
    option = prompt(
      "Seleccione el tipo de operaci√≥n que desea realizar \n   a.- Simulador Prestamo personal üí∞\n   b.- Simulador Compra/Venta U$D (Dolar) üíµ \n   c.- Simulador Compra/Venta ‚Ç¨ (Euros) üí∂ \n   d.- Salir üö™"
    );

    switch (option) {
      case "a":
        simuladorPrestamo();
        break;

      case "b":
        simuladorDolares();
        break;

      case "c":
        simuladorEuros();
        break;

      case "d":
        alert("‚û°Ô∏è‚û°Ô∏èSaliendo del Simulador Financiero");
        break;

      default:
        alert("üõë‚ùå Opci√≥n no v√°lida ‚ùåüõë");
        break;
    }
  } while (option !== "d");
} else {
  alert(
    "Ha alcanzado el n√∫mero m√°ximo de intentos. \nüîíüîíSu cuenta ha sido bloqueada.üîíüîí"
  );
}
